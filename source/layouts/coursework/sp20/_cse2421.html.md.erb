This is the first of two courses in the Systems Sequence, although the content of CSE 2421 and CSE 2431 significantly differ.

This course introduced various topics in low-level programming and computer organization. The C programming language and x86-64 Assembly language were taught.
Other topics focused on included UNIX/Linux, makefiles, pointer arithmetic, array representation, string representation, basic memory structures (stack, heap, text),
linked data structures, storage class/scope/linkage, integer representation, integer addition and multiplication, floating-point representation, endianness and byte order,
performance, registers/cache memory, bitwise operations, bit manipulation, assembly operations, function calls and recursion on the stack, RISC and CISC architecture, and linking.

Representative projects included:

* Incrementally design and implement a detailed Colorado Air Traffic Control simulator in C, using a provided curses library as a graphical interface.
  * Each increment adds more features to the simulator, such as reading flight information from `stdin`, printing a textual flight log to `stderror`, designing flight profiles
  using function pointers, implementing a linked list to support multiple simultaneous flights, and using arrays of function pointers to gracefully start up and shut down the simulator.
  * For more information about this project, see *Colorado Air Traffic Control Simulator* under **Projects Completed for Coursework** in [Projects](../projects)
* Implement various C functions in x86-64 Assembler, utilizing bitwise operations, loops, branching, and array/pointer/struct arithmetic.